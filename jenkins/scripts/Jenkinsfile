pipeline {
    agent any

    environment {
        AWS_ACCOUNT = '975050024946'
        AWS_REGION = 'ap-south-1'
        ECR_REGISTRY = "${AWS_ACCOUNT}.dkr.ecr.${AWS_REGION}.amazonaws.com"
        DOCKER_BUILDKIT = '1' // Changed to 1 to enable BuildKit
    }

    stages {
        stage('ECR Login') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'ecr-credentials',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    sh '''
                        echo "Logging into AWS ECR..."
                        aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
                        aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
                        aws configure set region $AWS_REGION
                        aws ecr get-login-password | docker login --username AWS --password-stdin $ECR_REGISTRY
                    '''
                }
            }
        }

        stage('Build & Push') {
            parallel {
                stage('Frontend') {
                    steps {
                        dir('frontend') {
                            script {
                                docker.build("${ECR_REGISTRY}/mern-frontend:latest", "--platform linux/amd64 .")
                                sh "docker push ${ECR_REGISTRY}/mern-frontend:latest"
                            }
                        }
                    }
                }

                stage('Hello-Service') {
                    steps {
                        dir('backend/helloService') {
                            script {
                                docker.build("${ECR_REGISTRY}/mern-hello-service:latest", "--platform linux/amd64 .")
                                sh "docker push ${ECR_REGISTRY}/mern-hello-service:latest"
                            }
                        }
                    }
                }

                stage('Profile-Service') {
                    steps {
                        dir('backend/profileService') {
                            script {
                                docker.build("${ECR_REGISTRY}/mern-profile-service:latest", "--platform linux/amd64 .")
                                sh "docker push ${ECR_REGISTRY}/mern-profile-service:latest"
                            }
                        }
                    }
                }
            }
        }

        stage('Deploy to ECS') {
            steps {
                withCredentials([[
                    $class: 'AmazonWebServicesCredentialsBinding',
                    credentialsId: 'ecr-credentials',
                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY'
                ]]) {
                    script {
                        // Only deploy the existing profile-service
                        sh """
                            echo "Deploying profile-service to ECS..."
                            aws ecs update-service \
                                --cluster mern-cluster \
                                --service profile-service \
                                --force-new-deployment \
                                --region $AWS_REGION
                        """
                        
                        // Optional: Create other services if needed
                        // createEcsServiceIfNotExists('frontend-service')
                        // createEcsServiceIfNotExists('hello-service')
                    }
                }
            }
        }
    }

    post {
        always {
            echo "Cleaning workspace..."
            cleanWs()
        }
        failure {
            slackSend(color: 'danger', message: "Pipeline failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
        }
        success {
            slackSend(color: 'good', message: "Pipeline succeeded: ${env.JOB_NAME} #${env.BUILD_NUMBER}")
        }
    }
}